// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  chats Chat[] @relation("ChatParticipants")

  friendOf1    Friendship[] @relation("User1")
  friendOf2    Friendship[] @relation("User2")

  receivedFriendshipRequests FriendshipRequest[] @relation("FriendshipRequestsReceived")
  sentFriendshipRequests     FriendshipRequest[] @relation("FriendshipRequestsSent")

  sentMessages Message[] @relation("Sender")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @db.Text @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Chat {
  id          String   @id @default(uuid())
  name        String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants Profile[] @relation("ChatParticipants")
  messages    Message[]
}

model Message {
  id         String    @id @default(uuid())
  content    String

  sender     Profile   @relation("Sender", fields: [senderId], references: [userId])
  senderId   String

  chat       Chat      @relation(fields: [chatId], references: [id])
  chatId     String

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model FriendshipRequest {
  id            String   @id @default(uuid())
  sender        Profile  @relation("FriendshipRequestsSent", fields: [senderId], references: [id])

  senderId      String

  recipient     Profile  @relation("FriendshipRequestsReceived", fields: [recipientId], references: [id])
  recipientId   String

  status        String   // "pending", "accepted", "rejected"

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Friendship {
  id          String    @id @default(uuid())

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user1       Profile   @relation("User1", fields: [userId1], references: [id])
  userId1     String

  user2       Profile   @relation("User2", fields: [userId2], references: [id])
  userId2     String
}